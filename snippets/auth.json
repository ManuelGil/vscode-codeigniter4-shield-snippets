{
  "setAuthenticator": {
    "prefix": [
      "ci:auth:setAuthenticator",
      "setAuthenticator"
    ],
    "body": "auth()->setAuthenticator('${1:alias}')",
    "description": "Sets the Authenticator alias that should be used for this request."
  },
  "getAuthenticator": {
    "prefix": [
      "ci:auth:getAuthenticator",
      "getAuthenticator"
    ],
    "body": "auth()->getAuthenticator()",
    "description": "Returns the current authentication class."
  },
  "user": {
    "prefix": [
      "ci:auth:user",
      "user"
    ],
    "body": "auth()->user()",
    "description": "Returns the current user, if logged in."
  },
  "id": {
    "prefix": [
      "ci:auth:id",
      "id"
    ],
    "body": "auth()->id()",
    "description": "Returns the current user's ID, if logged in."
  },
  "authenticate": {
    "prefix": [
      "ci:auth:authenticate",
      "authenticate"
    ],
    "body": "auth()->authenticate([${1:credentials}])",
    "description": "Attempts to authenticate the user with the given credentials."
  },
  "routes": {
    "prefix": [
      "ci:auth:routes",
      "routes"
    ],
    "body": "auth()->routes('${1:routes}', [${2:config}])",
    "description": "Will set the routes in your application to use the Shield auth routes."
  },
  "getProvider": {
    "prefix": [
      "ci:auth:getProvider",
      "getProvider"
    ],
    "body": "auth()->getProvider()",
    "description": "Returns the Model that is responsible for getting users."
  },
  "attempt": {
    "prefix": [
      "ci:auth:attempt",
      "attempt"
    ],
    "body": "auth()->attempt([${1:credentials}])",
    "description": "Attempts to authenticate the user with the given credentials."
  },
  "check": {
    "prefix": [
      "ci:auth:check",
      "check"
    ],
    "body": "auth()->check([${1:credentials}])",
    "description": "Checks a user's credentials to see if they match an existing user."
  },
  "checkAction": {
    "prefix": [
      "ci:auth:checkAction",
      "checkAction"
    ],
    "body": "auth()->checkAction('${1:token}', '${2:type}')",
    "description": "Checks if the user is allowed to perform the given action."
  },
  "forget": {
    "prefix": [
      "ci:auth:forget",
      "forget"
    ],
    "body": "auth()->forget(${1:user})",
    "description": "Forgets the given user."
  },
  "getUser": {
    "prefix": [
      "ci:auth:getUser",
      "getUser"
    ],
    "body": "auth()->getUser()",
    "description": "Returns the current user, if logged in."
  },
  "loggedIn": {
    "prefix": [
      "ci:auth:loggedIn",
      "loggedIn"
    ],
    "body": "auth()->loggedIn()",
    "description": "Checks if the user is logged in."
  },
  "login": {
    "prefix": [
      "ci:auth:login",
      "login"
    ],
    "body": "auth()->login(${1:user})",
    "description": "Logs the given user in."
  },
  "loginById": {
    "prefix": [
      "ci:auth:loginById",
      "loginById"
    ],
    "body": "auth()->loginById(${1:userId})",
    "description": "Logs the given user in by their ID."
  },
  "logout": {
    "prefix": [
      "ci:auth:logout",
      "logout"
    ],
    "body": "auth()->logout()",
    "description": "Logs the current user out."
  },
  "recordActiveDate": {
    "prefix": [
      "ci:auth:recordActiveDate",
      "recordActiveDate"
    ],
    "body": "auth()->recordActiveDate()",
    "description": "Records the current date as the last active date for the current user."
  },
  "remember": {
    "prefix": [
      "ci:auth:remember",
      "remember"
    ],
    "body": "auth()->remember(${1:shouldRemember})",
    "description": "Sets whether the user should be remembered or not."
  }
}
